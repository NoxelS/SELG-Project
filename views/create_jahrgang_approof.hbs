{{! Style für Autocomplete}}
<style>
* {
  box-sizing: border-box;
}

/*the container must be positioned relative:*/
.autocomplete {
  position: relative;
  display: inline-block;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>
{{!/ Style}}

<div class="container-fluid">
    <div class="container-fluid border mb-4">
        <br>
        <div class="container-fluid">
            <div class="card-header" style="background-color: #e9ecef;">
                Überprüfen Sie ihre Eingabe
            </div>
            <div class="card-body">
                <table class="table table-sm table-hover table-striped">
                    <p> <b>{{count}} Schüeler </b> wurden in der Tabelle gefunden</p>
                    <p class="pb-1 mb-1"> Wenn Sie sich sicher sind, dass die Daten stimmen, können Sie den Jahrgang erstellen:</p>
                    <button type="button" class="btn btn-primary mb-3" data-toggle="modal" data-target="#exampleModalCenter">
                      Jahrgang erstellen
                    </button>
                    <thead class="thead-inverse">
                        <tr>   
                            <th><b>#</b></th>
                            {{#each table_headings}}
                            <th>
                                {{this}}
                            </th>
                            {{/each}}
                        </tr>
                        </thead>
                        <tbody>
                            {{#each schueler}}
                            <tr>
                                <td><b>{{@index}}</b></td>
                                {{#each this}}
                                    <td>{{this}}</td>
                                {{/each}}
                            </tr>
                            {{/each}}
                        </tbody>
                </table>

                <br>
                
                 {{! Modal zur bestätigung & ermittlung der Klassenlehrer}}
                    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                      <div class="modal-dialog" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLongTitle">Es fehlen ein paar Angaben</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                              <span aria-hidden="true">&times;</span>
                            </button>
                          </div>
                          <div class="modal-body">
                            <form action="/admin/jahrgang_erstellen_sql" method="post" enctype="multipart/form-data" autocomplete="off" onsubmit="document.getElementById('overlay_loading').style.visibility = 'visible'; document.getElementById('dismiss').click();">  
                                <input type="hidden" name="schueler" value="{{schueler_string}}">
                                <p> Es wurden Klassen ohne Klassenlehrer gefunden. Bitte geben Sie diese an.</p>
                                {{! Für jede Klasse muss ein Klassenlehrer angegeben werden}}
                                {{#each klassen}}
                                <div class="form-group">
                                  <label for="klasse_{{this}}">Klassenlehrer für <b>{{this}}</b></label>
                                  <div class="autocomplete" style="width:100%;">
                                    <input type="text"
                                        class="form-control" name="klasse_{{this}}" id="klasse_{{this}}" aria-describedby="helpId" placeholder="Kürzel" required="required">
                                  </div>
                                </div>
                                {{/each}}
                                
                                <button type="submit" class="btn btn-primary my-3" >Jahrgang erstellen</button>
                                <button type="button" id="dismiss" class="btn btn-secondary my-3" data-dismiss="modal">Nochmals Überprüfen</button>
                            </form>
                          </div>
                          
                        </div>
                      </div>
                    </div>
                {{!/ Modal}}

                {{! Loading Screen}}
                  {{> tutorial/loading}}
                {{!/Loading}}

                {{! Javascript für Autocomplete}}
                    <script>
                        function autocomplete(inp, arr) {
                          /*the autocomplete function takes two arguments,
                          the text field element and an array of possible autocompleted values:*/
                          var currentFocus;
                          /*execute a function when someone writes in the text field:*/
                          inp.addEventListener("input", function(e) {
                              var a, b, i, val = this.value;
                              /*close any already open lists of autocompleted values*/
                              closeAllLists();
                              if (!val) { return false;}
                              currentFocus = -1;
                              /*create a DIV element that will contain the items (values):*/
                              a = document.createElement("DIV");
                              a.setAttribute("id", this.id + "autocomplete-list");
                              a.setAttribute("class", "autocomplete-items");
                              /*append the DIV element as a child of the autocomplete container:*/
                              this.parentNode.appendChild(a);
                              /*for each item in the array...*/
                              for (i = 0; i < arr.length; i++) {
                                /*check if the item starts with the same letters as the text field value:*/
                                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                                  /*create a DIV element for each matching element:*/
                                  b = document.createElement("DIV");
                                  /*make the matching letters bold:*/
                                  b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                                  b.innerHTML += arr[i].substr(val.length);
                                  /*insert a input field that will hold the current array item's value:*/
                                  b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                                  /*execute a function when someone clicks on the item value (DIV element):*/
                                  b.addEventListener("click", function(e) {
                                      /*insert the value for the autocomplete text field:*/
                                      inp.value = this.getElementsByTagName("input")[0].value;
                                      /*close the list of autocompleted values,
                                      (or any other open lists of autocompleted values:*/
                                      closeAllLists();
                                  });
                                  a.appendChild(b);
                                }
                              }
                          });
                          /*execute a function presses a key on the keyboard:*/
                          inp.addEventListener("keydown", function(e) {
                              var x = document.getElementById(this.id + "autocomplete-list");
                              if (x) x = x.getElementsByTagName("div");
                              if (e.keyCode == 40) {
                                /*If the arrow DOWN key is pressed,
                                increase the currentFocus variable:*/
                                currentFocus++;
                                /*and and make the current item more visible:*/
                                addActive(x);
                              } else if (e.keyCode == 38) { //up
                                /*If the arrow UP key is pressed,
                                decrease the currentFocus variable:*/
                                currentFocus--;
                                /*and and make the current item more visible:*/
                                addActive(x);
                              } else if (e.keyCode == 13) {
                                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                                e.preventDefault();
                                if (currentFocus > -1) {
                                  /*and simulate a click on the "active" item:*/
                                  if (x) x[currentFocus].click();
                                }
                              }
                          });
                          function addActive(x) {
                            /*a function to classify an item as "active":*/
                            if (!x) return false;
                            /*start by removing the "active" class on all items:*/
                            removeActive(x);
                            if (currentFocus >= x.length) currentFocus = 0;
                            if (currentFocus < 0) currentFocus = (x.length - 1);
                            /*add class "autocomplete-active":*/
                            x[currentFocus].classList.add("autocomplete-active");
                          }
                          function removeActive(x) {
                            /*a function to remove the "active" class from all autocomplete items:*/
                            for (var i = 0; i < x.length; i++) {
                              x[i].classList.remove("autocomplete-active");
                            }
                          }
                          function closeAllLists(elmnt) {
                            /*close all autocomplete lists in the document,
                            except the one passed as an argument:*/
                            var x = document.getElementsByClassName("autocomplete-items");
                            for (var i = 0; i < x.length; i++) {
                              if (elmnt != x[i] && elmnt != inp) {
                                x[i].parentNode.removeChild(x[i]);
                              }
                            }
                          }
                          /*execute a function when someone clicks in the document:*/
                          document.addEventListener("click", function (e) {
                              closeAllLists(e.target);
                          });
                        }
                    </script>
                {{!/ Javascript}}
                    
                {{! Javacript Liste Aller Fachlehrer}}
                    <script>
                        var fachlehrer = [
                            {{#each user}} "{{this}}", {{/each}}
                        ];
                    </script>
                {{!/ Javascript}}

                {{! Macht autocomplete für jede Eingabe möglich}}
                    <script>
                        {{#each klassen}}
                            autocomplete(document.getElementById("klasse_{{this}}"), fachlehrer);
                        {{/each}}
                    </script>
                {{!/ Autocomplete Eingabe}}
            </div>
        </div>
    </div>
</div>
